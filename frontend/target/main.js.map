{"version":3,"file":"main.js","mappings":";;;AAKA;;;AAYA;;;AAGA;;;AAGA;AACA;AACA;AACA;;;;;AAMA;AACA;AACA;;AAEA;;ACRA;;;AAnBA;;;AAGA;;;AAGA;AACA;AACA;;;;;AAMA;AACA;AACA;AACA;;;;;ACjBA","sources":["webpack://computer3dconfigurator/./src/cpu/cpu-component.ts","webpack://computer3dconfigurator/./src/motherboard/mb-component.ts","webpack://computer3dconfigurator/./src/app-component.ts"],"sourcesContent":["import { html, render } from \"lit-html\";\nimport { loadAllCPUs } from \"./cpu-service\";\nconst styles = html `\n    <link rel=\"stylesheet\" href=\"/style.css\">\n`;\nclass CpuComponent extends HTMLElement {\n    constructor() {\n        super();\n        this.cpus = []; // Typisieren und initialisieren\n        // updateCPUs(filteredCpus: CPU[]) {\n        //     this.cpus = filteredCpus;\n        //     this.renderCPUs();\n        // }\n        this.tableTemplate = (cpus) => {\n            const data = cpus.map(cpu => html `\n            <div class=\"CpuContainer\">\n        <div class=\"CpuDetails\">\n            <p class=\"CpuName\"><strong>${cpu.name}</strong></p>\n            <div class=\"ContentWrapper\">\n                <div class=\"Image\">\n                    <img src=\"${cpu.img}\" alt=\"${cpu.name}\">\n                </div>\n                <div class=\"Info\">\n                    <p>Preis: ${cpu.price}</p>\n                    <p>Sockel: ${cpu.socket}</p>\n                    <!--<button class=\"addButton\" onclick=\"addCpu(${cpu.cpu_id})\">Hinzufügen</button>-->\n                    <button class=\"addButton\" @click=${() => this.addCpu(cpu.cpu_id)}>Press me!</button>\n                </div>\n            </div>\n        </div>\n    </div>        \n            `);\n            return html `\n        ${styles}\n                ${data}\n                \n    `;\n        };\n        this.attachShadow({ mode: \"open\" });\n    }\n    async connectedCallback() {\n        this.cpus = await loadAllCPUs();\n        this.renderCPUs();\n    }\n    renderCPUs() {\n        render(this.tableTemplate(this.cpus), this.shadowRoot); // Typ-Anpassung\n    }\n    addCpu(cpuid) {\n        const event = new CustomEvent(\"add-cpu\", { detail: { cpuid } });\n        this.dispatchEvent(event);\n    }\n}\ncustomElements.define(\"cpu-component\", CpuComponent);\n","import { html, render } from \"lit-html\";\nimport { loadAllMotherboards } from \"./mb-service\";\nconst styles = html `\n    <link rel=\"stylesheet\" href=\"/style.css\">\n`;\nconst tableTemplate = (mbs) => {\n    const data = mbs.map(mb => html `   \n        <div class=\"MbContainer\">\n    <div class=\"MbDetails\">\n        <p class=\"MbName\"><strong>${mb.name}</strong></p>\n        <div class=\"ContentWrapper\">\n            <div class=\"Image\">\n                <img src=\"${mb.img}\" alt=\"${mb.name}\">\n            </div>\n            <div class=\"Info\">\n                <p>Preis: ${mb.price}</p>\n                <p>Sockel: ${mb.socket}</p>\n                <button class=\"addButton\" onclick=\"addMotherboard(${mb.motherboard_id})\">Hinzufügen</button>\n            </div>\n        </div>\n    </div>\n</div>                 \n        `);\n    return html `\n    ${styles}\n            ${data}      \n`;\n};\nclass MbComponent extends HTMLElement {\n    constructor() {\n        super();\n        this.motherboards = []; // Typisieren und initialisieren\n        this.attachShadow({ mode: \"open\" });\n    }\n    async connectedCallback() {\n        this.motherboards = await loadAllMotherboards();\n        this.renderMotherboards();\n    }\n    renderMotherboards() {\n        render(tableTemplate(this.motherboards), this.shadowRoot); // Typ-Anpassung\n    }\n    updateMotherboards(filteredMotherboards) {\n        this.motherboards = filteredMotherboards;\n        this.renderMotherboards();\n    }\n}\ncustomElements.define(\"mb-component\", MbComponent);\n","import { html, render } from \"lit-html\";\nimport \"./cpu\";\nimport \"./motherboard\";\nconst content = html `\n        <h2>CPUs</h2>\n        <cpu-component></cpu-component>\n        <h2>Motherboards</h2>\n        <mb-component></mb-component>\n`;\nclass AppComponent extends HTMLElement {\n    connectedCallback() {\n        render(content, this);\n    }\n}\ncustomElements.define(\"app-component\", AppComponent);\n"],"names":[],"sourceRoot":""}